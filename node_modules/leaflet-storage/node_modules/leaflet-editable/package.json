{
  "name": "leaflet-editable",
  "version": "0.3.0",
  "description": "Make geometries editable in Leaflet",
  "main": "src/Leaflet.Editable.js",
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "leaflet",
    "map"
  ],
  "author": {
    "name": "Yohan Boniface"
  },
  "license": "WTFPL",
  "devDependencies": {
    "chai": "^1.9.1",
    "happen": "^0.1.3",
    "mocha": "^1.21.3"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/yohanboniface/Leaflet.Editable.git"
  },
  "bugs": {
    "url": "https://github.com/yohanboniface/Leaflet.Editable/issues"
  },
  "homepage": "https://github.com/yohanboniface/Leaflet.Editable/",
  "dependencies": {
    "leaflet": "^0.7.3"
  },
  "readme": "# Leaflet.Editable\n\nMake geometries editable in Leaflet.\n\nThis is not a plug and play UI, and will not. This is a minimal, lightweight,\nand fully extendable API to control editing of geometries. So you can easily\nbuild your own UI with your own needs and choices.\n\nSee the [demo UI](http://yohanboniface.github.io/Leaflet.Editable/example/index.html), an more [examples below](#examples).\nThis is also the drawing engine behind [uMap](http://wiki.openstreetmap.org/wiki/UMap).\n\n\nDesign keys:\n\n- only the core needs\n- no UI, instead hooks everywhere needed\n- everything programatically controlable\n- MultiPolygon/MultiPolyline support\n- Polygons' holes support\n- touch support\n- tests\n\nNote: only [geojson](http://geojson.org/) features are supported for now:\nMarker, Polyline, Polygon, and MultiPolygon/MultiPolylines (no Rectangle, Circle…)\n\n## Install\n\nYou need Leaflet >= 0.7.3, and then include `src/Leaflet.Editable.js`.\n\n\n## Quick start\n\nAllow Leaflet.Editable in the map options:\n\n    var map = L.map('map', {editable: true});\n\nThen, to start editing an existing feature, call the `enableEdit` method on it:\n\n    var polyline = L.polyline([[43.1, 1.2], [43.2, 1.3],[43.3, 1.2]]).addTo(map);\n    polyline.enableEdit();\n\nIf you want to draw a new line:\n\n    map.editTools.startPolyline();  // map.editTools has been created\n                                    // by passing editable: true option to the map\n\nIf you want to continue an existing line:\n\n    polyline.continueForward();\n    // or\n    polyline.continueBackward();\n\n## Examples\n\n- [Basic controls](http://yohanboniface.github.io/Leaflet.Editable/example/index.html)\n- [Continue line by ctrl-clicking on first/last point](http://yohanboniface.github.io/Leaflet.Editable/example/continue-line.html)\n- [Create hole in a polygon by ctrl-clicking on it](http://yohanboniface.github.io/Leaflet.Editable/example/create-hole-on-click.html)\n- [Change line colour on editing](http://yohanboniface.github.io/Leaflet.Editable/example/change-line-colour-on-editing.html)\n- [Display a tooltip near cursor while drawing](http://yohanboniface.github.io/Leaflet.Editable/example/tooltip-when-drawing.html)\n\n\n## API\n\nLeaflet.Editable is made to be fully extendable. You have three ways to customize\nthe behaviour: using options, listening to events, or extending.\n\n### L.Map\n\nLeaflet.Editable add options and events to the `L.Map` object.\n\n#### Options\n\n|    option name      |  default  |                      usage               |\n|---------------------|-----------|------------------------------------------|\n| editable            | false     |  Whether to create a L.Editable instance at map init or not.  |\n| editOptions         | {}        |  Options to pass to L.Editable when instanciating.  |\n\n\n#### Events\n|    event name      |  properties  |                      usage               |\n|---------------------|-----------|------------------------------------------|\n| editable:created    | layer     |  Fired when a new feature (Marker, Polyline…) has been created.  |\n| editable:enable     | layer     |  Fired when an existing feature is ready to be edited  |\n| editable:disable    | layer     |  Fired when an existing feature is not ready anymore to be edited  |\n| editable:editing    | layer     |  Fired as soon as any change is made to the feature geometry  |\n| editable:drawing:start | layer   |  Fired when a feature is to be drawn  |\n| editable:drawing:end | layer    |  Fired when a feature is not drawn anymore  |\n| editable:drawing:cancel | layer    |  Fired when user cancel drawing while a feature is being drawn  |\n| editable:drawing:commit | layer    |  Fired when user finish drawing a feature  |\n| editable:drawing:click | layer    |  Fired when user click while drawing  |\n| editable:vertex:ctrlclick | originalEvent, latlng, vertex, layer    |  Fired when a click having ctrlKey is issued on a vertex  |\n| editable:vertex:shiftclick | originalEvent, latlng, vertex, layer    |  Fired when a click having shiftKey is issued on a vertex  |\n| editable:vertex:altclick | originalEvent, latlng, vertex, layer    |  Fired when a click having altKey is issued on a vertex  |\n| editable:vertex:contextmenu | originalEvent, latlng, vertex, layer    |  Fired when a contextmenu is issued on a vertex  |\n| editable:vertex:deleted | originalEvent, latlng, vertex, layer    |  Fired after a vertex has been deleted by user |\n\n\n### L.Editable\n\nYou will usually have only one instance of L.Editable, and generally the one\ncreated automatically at map init: `map.editTools`. It's the toolbox you will\nuse to create new features, and also the object you will configure with options.\nLet's see them.\n\n#### Options\n\n*Note: you can pass them when creating a map using the `editOptions` key.*\n\n|    option name      |  default  |                      usage               |\n|---------------------|-----------|------------------------------------------|\n| polylineClass       | L.Polyline |  Class to be used when creating a new Polyline  |\n| polygonClass        | L.Polygon |  Class to be used when creating a new Polygon  |\n| markerClass         | L.Marker |  Class to be used when creating a new Marker  |\n| drawingCSSClass     | leaflet-editable-drawing |  CSS class to be added to the map container while drawing  |\n| editLayer     | new L.LayerGroup() |  Layer used to store edit tools (vertex, line guide…)  |\n| vertexMarkerClass | L.Editable.VertexMarker | Class to be used as vertex, for path editing  |\n| middleMarkerClass | L.Editable.MiddleMarker | Class to be used as middle vertex, pulled by the user to create a new point in the middle of a path  |\n| polylineEditorClass | L.Editable.PolylineEditor | Class to be used as Polyline editor  |\n| polygonEditorClass | L.Editable.PolygonEditor | Class to be used as Polygon editor  |\n| markerEditorClass | L.Editable.MarkerEditor | Class to be used as Marker editor  |\n\n#### Methods\n\nThose are the public methods. You will generally access them by the `map.editTools`\ninstance:\n\n    map.editTools.startPolyline();\n\n|  method name   |  params | return |                      usage               |\n|----------------|---------|--------|---------------------------------|\n| startPolyline  | latlng\\*  | created L.Polyline instance | Start drawing a polyline. If latlng is given, a first point will be added. In any case, continuing on user click. |\n| startPolygon  | latlng\\*  | created L.Polygon instance | Start drawing a polygon. If latlng is given, a first point will be added. In any case, continuing on user click. |\n| startMarker  | latlng\\*  | created L.Marker instance | Start adding a marker. If latlng is given, the marker will be shown first at this point. In any case, it will follow the user mouse, and will have a final latlng on next click (or touch). |\n| stopDrawing  | — | — | When you need to stop any ongoing drawing, without needing to know which editor is active. |\n\n\n### L.Editable.VertexMarker\n\nThe marker used to handle path vertex. You will usually interact with a `VertexMarker`\ninstance when listening for events like `editable:vertex:ctrlclick`.\n\nThose are its public methods.\n\n|  method name   |  params | return |                      usage               |\n|----------------|---------|--------|---------------------------------|\n| delete  | —  | — | Delete a vertex and the related latlng. |\n| getIndex  | —  | int | Get the index of the current vertex among others of the same LatLngs group. |\n| getLastIndex  | —  | int | Get last vertex index of the LatLngs group of the current vertex. |\n| getPrevious  | —  | VertexMarker instance | Get the previous VertexMarker in the same LatLngs group. |\n| getNext  | —  | VertexMarker instance | Get the next VertexMarker in the same LatLngs group. |\n\n\n### L.Editable.BaseEditor\n\nWhen editing a feature (marker, polyline…), an editor is attached to it. This\neditor basically knows how to handle the edition.\n\nIt has some public methods:\n\n|  method name   |  params | return |                      usage               |\n|----------------|---------|--------|---------------------------------|\n| enable  | —  | this | Set up the drawing tools for the feature to be editable. |\n| disable  | —  | this | Remove editing tools. |\n\n\n### L.Editable.MarkerEditor\n\nInherit from `L.Editable.BaseEditor`.\n\n### L.Editable.PathEditor\n\nInherit from `L.Editable.BaseEditor`.\n\nInherited by `L.Editable.PolylineEditor` and `L.Editable.PolygonEditor`.\n\nInteresting new method:\n\n|  method name   |  params | return |                      usage               |\n|----------------|---------|--------|---------------------------------|\n| reset  | —  | — | Rebuild edit elements (vertex, middlemarker, etc.) |\n\n\n### L.Editable.PolylineEditor\n\nInherit from `L.Editable.PathEditor`.\n\nUseful specific methods:\n\n|  method name   |  params | return |              usage              |\n|----------------|---------|--------|---------------------------------|\n| continueForward  | —  | — | Set up drawing tools to continue the line forward |\n| continueBackward  | —  | — | Set up drawing tools to continue the line backward |\n\n### L.Editable.PolygonEditor\n\nInherit from `L.Editable.PathEditor`.\n\n|  method name   |  params | return |              usage              |\n|----------------|---------|--------|---------------------------------|\n| newHole  | latlng\\*  | — | Set up drawing tools for creating a new hole on the polygon. If the latlng param is given, a first point is created. |\n\n\n### EditableMixin\n\n`EditableMixin` is included to `L.Polyline`, `L.Polygon` and `L.Marker`. It\nadds the following methods to them.\n\n*When editing is enabled, the editor is accessible on the instance with the\n`editor` property.*\n\n#### Methods\n\n|  method name   |  params | return |                      usage               |\n|----------------|---------|--------|---------------------------------|\n| enableEdit  | —  | related editor instance | Enable editing, by creating an editor if not existing, and then calling `enable` on it |\n| disableEdit  | —  | — | Disable editing, also remove the editor property reference. |\n| toggleEdit  | —  | — | Enable or disable editing, according to current status. |\n| editEnabled  | —  | boolean | Return true if current instance has an editor attached, and this editor is enabled. |\n\n#### Events\n\nSome events are also fired on the feature itself.\n\n|    event name      |  properties  |                      usage               |\n|---------------------|-----------|------------------------------------------|\n| editable:drawing:start | layer   |  Fired when a feature is to be drawn  |\n| editable:drawing:end | layer    |  Fired when a feature is not drawn anymore  |\n| editable:drawing:cancel | layer    |  Fired when user cancel drawing while a feature is being drawn  |\n| editable:drawing:commit | layer    |  Fired when user finish drawing a feature  |\n| editable:drawing:click | layer    |  Fired when user click while drawing  |\n| editable:vertex:ctrlclick | originalEvent, latlng, vertex, layer    |  Fired when a click having ctrlKey is issued on a vertex  |\n| editable:vertex:shiftclick | originalEvent, latlng, vertex, layer    |  Fired when a click having shiftKey is issued on a vertex  |\n| editable:vertex:altclick | originalEvent, latlng, vertex, layer    |  Fired when a click having altKey is issued on a vertex  |\n| editable:vertex:contextmenu | originalEvent, latlng, vertex, layer    |  Fired when a contextmenu is issued on a vertex  |\n| editable:vertex:deleted | originalEvent, latlng, vertex, layer    |  Fired after a vertex has been deleted by user |\n\n\n## Licence\n\n`Leaflet.Editable` is released under the WTFPL licence.\n",
  "readmeFilename": "README.md",
  "_id": "leaflet-editable@0.3.0",
  "_from": "leaflet-editable@^0.3.0"
}
